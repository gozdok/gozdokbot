import telebot
import schedule
import threading
import time
import random
from flask import Flask, request
from datetime import datetime

TOKEN = "7762206409:AAFePy9OGuJWG-HxB48JRoKc1f6VFa4IRYc"
CHAT_ID = 312503925
WEBHOOK_URL = "https://gozdokbot.onrender.com/"
TIMEZONE_OFFSET = 3

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

user_states = {}
user_notifications = {}

def get_main_menu():
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        telebot.types.KeyboardButton("–¢–µ—Å—Ç"),
        telebot.types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"),
        telebot.types.KeyboardButton("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    )
    return markup

def send_message(text):
    bot.send_message(CHAT_ID, text)

def morning_vector():
    send_message("üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–π –≤–µ–∫—Ç–æ—Ä:\n–û–ø—Ä–µ–¥–µ–ª–∏ 1 –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É –¥–Ω—è –∏ –∑–∞–ø–∏—à–∏ –µ—ë.\n–ß—Ç–æ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?")

def focus_session():
    send_message("‚è± 25 –º–∏–Ω—É—Ç —Ñ–æ–∫—É—Å–∞:\n–ó–∞–ø—É—Å—Ç–∏ —Ç–∞–π–º–µ—Ä –Ω–∞ 25 –º–∏–Ω—É—Ç –∏ —Ä–∞–±–æ—Ç–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞–¥ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–µ–π.\n–ü–æ—Å–ª–µ ‚Äî —Å–¥–µ–ª–∞–π 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ—Ä—ã–≤.")

def one_minute_silence():
    send_message("ü§´ 1 –º–∏–Ω—É—Ç–∞ —Ç–∏—à–∏–Ω—ã:\n–ó–∞–∫—Ä–æ–π –≥–ª–∞–∑–∞. –°–¥–µ–ª–∞–π –≥–ª—É–±–æ–∫–∏–π –≤–¥–æ—Ö. –ü—Ä–æ—Å—Ç–æ –ø–æ—Å–∏–¥–∏ –≤ —Ç–∏—à–∏–Ω–µ –æ–¥–Ω—É –º–∏–Ω—É—Ç—É.\n–ü–æ–∑–≤–æ–ª—å —Å–µ–±–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∫–æ—è.")

def five_min_rule():
    send_message("üñê –ü—Ä–∞–≤–∏–ª–æ 5 –º–∏–Ω—É—Ç:\n–ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä—É—é –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ—à—å ‚Äî –Ω–∞—á–Ω–∏ —Å 5 –º–∏–Ω—É—Ç.\n–ó–∞–≤–µ–¥–∏ —Ç–∞–π–º–µ—Ä –∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏.")

def daily_reflection():
    send_message("üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–Ω—è:\n–ß—Ç–æ –±—ã–ª–æ —Ö–æ—Ä–æ—à–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è?\n–ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–≤—Ç—Ä–∞?\n–ó–∞–ø–∏—à–∏ 1-2 –º—ã—Å–ª–∏.")

def schedule_tasks():
    schedule.every().day.at("09:00").do(morning_vector)
    schedule.every().day.at("22:00").do(daily_reflection)

    random_times = set()
    while len(random_times) < 3:
        hour = random.randint(12, 19)
        minute = random.randint(0, 59)
        random_times.add(f"{hour:02}:{minute:02}")
    times = list(random_times)

    schedule.every().day.at(times[0]).do(one_minute_silence)
    schedule.every().day.at(times[1]).do(five_min_rule)
    schedule.every().day.at(times[2]).do(focus_session)

def run_schedule():
    schedule_tasks()
    while True:
        schedule.run_pending()
        time.sleep(1)

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫. –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å üß≠", reply_markup=get_main_menu())

@bot.message_handler(func=lambda msg: msg.text == "–¢–µ—Å—Ç")
def test_button(message):
    bot.send_message(message.chat.id, "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

@bot.message_handler(func=lambda msg: msg.text == "–î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
def add_notification(message):
    user_states[message.chat.id] = {"step": "choose_time_type"}
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è", "–°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", reply_markup=markup)

@bot.message_handler(func=lambda msg: msg.text in ["–¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è", "–°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è"])
def choose_time_type(message):
    state = user_states.get(message.chat.id)
    if not state:
        return
    state["time_type"] = message.text
    state["step"] = "enter_text"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")

@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id, {}).get("step") == "enter_text")
def enter_text(message):
    user_states[message.chat.id]["text"] = message.text
    time_type = user_states[message.chat.id]["time_type"]
    if time_type == "–¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):")
    else:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12:00-18:00):")
    user_states[message.chat.id]["step"] = "enter_time"

@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id, {}).get("step") == "enter_time")
def enter_time(message):
    state = user_states[message.chat.id]
    text = state["text"]
    time_type = state["time_type"]

    if time_type == "–¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è":
        time_str = message.text
        try:
            datetime.strptime(time_str, "%H:%M")
        except ValueError:
            return bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        schedule.every().day.at(time_str).do(lambda: bot.send_message(message.chat.id, text)).tag(f"user_{message.chat.id}")
        user_notifications.setdefault(message.chat.id, []).append({
            "text": text,
            "time": time_str,
            "interval": None
        })
    else:
        try:
            start_str, end_str = message.text.split("-")
            start = datetime.strptime(start_str.strip(), "%H:%M")
            end = datetime.strptime(end_str.strip(), "%H:%M")
        except ValueError:
            return bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –∫–∞–∫ –ß–ß:–ú–ú-–ß–ß:–ú–ú.")
        hour = random.randint(start.hour, end.hour)
        minute = random.randint(0, 59)
        time_str = f"{hour:02}:{minute:02}"
        schedule.every().day.at(time_str).do(lambda: bot.send_message(message.chat.id, text)).tag(f"user_{message.chat.id}")
        user_notifications.setdefault(message.chat.id, []).append({
            "text": text,
            "time": time_str,
            "interval": f"{start_str.strip()} - {end_str.strip()}"
        })

    bot.send_message(message.chat.id, "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=get_main_menu())
    user_states.pop(message.chat.id, None)

@bot.message_handler(func=lambda msg: msg.text == "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
def show_notifications(message):
    notifs = user_notifications.get(message.chat.id, [])
    if not notifs:
        return bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.", reply_markup=get_main_menu())

    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    for idx, notif in enumerate(notifs):
        label = f"{idx+1}. {notif['time']} ‚Äî {notif['text'][:20]}"
        markup.add(label)
    markup.add("–ù–∞–∑–∞–¥")
    user_states[message.chat.id] = {"step": "choose_to_delete"}
    bot.send_message(message.chat.id, "–¢–≤–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ù–∞–∂–º–∏, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å:", reply_markup=markup)

@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id, {}).get("step") == "choose_to_delete")
def delete_notification(message):
    if message.text == "–ù–∞–∑–∞–¥":
        user_states.pop(message.chat.id, None)
        return bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é.", reply_markup=get_main_menu())

    notifs = user_notifications.get(message.chat.id, [])
    try:
        idx = int(message.text.split(".")[0]) - 1
        notif = notifs.pop(idx)
        schedule.clear(f"user_{message.chat.id}")
        for n in notifs:
            schedule.every().day.at(n["time"]).do(lambda: bot.send_message(message.chat.id, n["text"])).tag(f"user_{message.chat.id}")
        bot.send_message(message.chat.id, f"üóë –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.", reply_markup=get_main_menu())
    except:
        bot.send_message(message.chat.id, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

    user_states.pop(message.chat.id, None)

@app.route('/', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        update = telebot.types.Update.de_json(request.get_data().decode('utf-8'))
        bot.process_new_updates([update])
        return '', 200
    return '', 403

@app.route('/set_webhook', methods=['GET'])
def set_webhook():
    success = bot.set_webhook(url=WEBHOOK_URL)
    return f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {success}"

@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ Webhook!"

if __name__ == '__main__':
    threading.Thread(target=run_schedule).start()
    app.run(host='0.0.0.0', port=8080)
